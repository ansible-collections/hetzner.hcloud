# Copyright: (c) 2019, Hetzner Cloud GmbH <info@hetzner-cloud.de>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
---
- name: Test missing required parameters # noqa: args[module]
  hetzner.hcloud.load_balancer_network:
    state: present
  ignore_errors: true
  register: result
- name: Verify missing required parameters
  ansible.builtin.assert:
    that:
      - result is failed
      - 'result.msg == "missing required arguments: load_balancer, network"'

- name: Test create with checkmode
  hetzner.hcloud.load_balancer_network:
    load_balancer: "{{ hcloud_load_balancer_name }}"
    network: "{{ hcloud_network_name }}"
    state: present
  check_mode: true
  register: result
- name: Verify create with checkmode
  ansible.builtin.assert:
    that:
      - result is changed

- name: Test create
  hetzner.hcloud.load_balancer_network:
    load_balancer: "{{ hcloud_load_balancer_name }}"
    network: "{{ hcloud_network_name }}"
    state: present
  register: result
- name: Verify create
  ansible.builtin.assert:
    that:
      - result is changed
      - result.hcloud_load_balancer_network.load_balancer == hcloud_load_balancer_name
      - result.hcloud_load_balancer_network.network == hcloud_load_balancer_name

- name: Test create idempotency
  hetzner.hcloud.load_balancer_network:
    load_balancer: "{{ hcloud_load_balancer_name }}"
    network: "{{ hcloud_network_name }}"
    state: present
  register: result
- name: Verify create idempotency
  ansible.builtin.assert:
    that:
      - result is not changed

- name: Test create with not existing load_balancer
  hetzner.hcloud.load_balancer_network:
    load_balancer: not-existing
    network: "{{ hcloud_network_name }}"
    state: present
  ignore_errors: true
  register: result
- name: Verify create with not existing load_balancer
  ansible.builtin.assert:
    that:
      - result is failed
      - 'result.msg == "resource (load_balancer) does not exist: not-existing"'

- name: Test create with not existing network
  hetzner.hcloud.load_balancer_network:
    load_balancer: "{{ hcloud_load_balancer_name }}"
    network: not-existing
    state: present
  ignore_errors: true
  register: result
- name: Verify create with not existing network
  ansible.builtin.assert:
    that:
      - result is failed
      - 'result.msg == "resource (network) does not exist: not-existing"'

- name: Test delete
  hetzner.hcloud.load_balancer_network:
    load_balancer: "{{ hcloud_load_balancer_name }}"
    network: "{{ hcloud_network_name }}"
    state: absent
  register: result
- name: Verify delete
  ansible.builtin.assert:
    that:
      - result is changed

- name: Test create with ip
  hetzner.hcloud.load_balancer_network:
    load_balancer: "{{ hcloud_load_balancer_name }}"
    network: "{{ hcloud_network_name }}"
    ip: 10.0.1.2
    state: present
  register: result
- name: Verify create with ip
  ansible.builtin.assert:
    that:
      - result is changed
      - result.hcloud_load_balancer_network.load_balancer == hcloud_load_balancer_name
      - result.hcloud_load_balancer_network.network == hcloud_load_balancer_name
      - result.hcloud_load_balancer_network.ip == "10.0.1.2"

- name: Test delete with ip
  hetzner.hcloud.load_balancer_network:
    load_balancer: "{{ hcloud_load_balancer_name }}"
    network: "{{ hcloud_network_name }}"
    ip: 10.0.1.2
    state: absent
  register: result
- name: Verify delete with ip
  ansible.builtin.assert:
    that:
      - result is changed
